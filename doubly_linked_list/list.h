/* Do not edit this file. */

/* Linked List interface.
 * Specialized for integers. */

#include <stdlib.h>

/* Linked list data structure declaration. */
struct list;

/* List node structure declaration. */
struct node;

/* Creates a new linked list and returns a pointer to it.
 * Returns NULL on failure. */
struct list *list_init(void);

/* Creates a new node that contains the number num and returns a pointer to
 * it.  Returns NULL on failure. */
struct node *list_new_node(int num);

/* Returns a pointer to the first node of the list L or NULL if list is empty. */
struct node *list_head(const struct list *l);

/* Returns a pointer to the node after node N.
 * Return NULL if N is NULL or if N is the last node in the list. */
struct node *list_next(const struct node *n);

/* Inserts node N at the front of list L.
 * Returns 0 if N was successfully inserted, 1 otherwise. */
int list_add_front(struct list *l, struct node *n);

/* Returns a pointer to the last node of the list L or NULL if list is empty. */
struct node *list_tail(const struct list *l);

/* Returns a pointer to the node before node N in the list L, or returns NULL
 * if N is the first node in the list or if N is not in the list at all. */
struct node *list_prev(const struct list *l, const struct node *n);

/* Appends node N at the back of list L.
 * Returns 0 if N was successfully appended, 1 otherwise. */
int list_add_back(struct list *l, struct node *n);

/* Returns the value stored in the list node N. If N is NULL the return
 * value is not defined. */
int list_node_get_value(const struct node *n);

/* Set the value of node N to VALUE.
 * Returns 0 if successful, 1 otherwise. */
int list_node_set_value(struct node *n, int value);

/* Unlink node N from list L. After unlinking, the list L contains no pointers
 * to the node N and N contains no pointers to nodes in L.
 * Returns 0 if N was successfully unlinked from list L, or 1 otherwise */
int list_unlink_node(struct list *l, struct node *n);

/* Frees node N. */
void list_free_node(struct node *n);

/* Cleans up entire list L data structure.
 * Returns 0 if successful, 1 otherwise. */
int list_cleanup(struct list *l);

/* Returns 1 if node N is present in list L and 0 if N is not present
 * in L. Returns -1 if an error occured. */
int list_node_present(const struct list *l, const struct node *n);

/* Inserts node N after node M in list L.
 * Fails if node M is not in the list L or if node N is already in list L.
 * Returns 0 if N was successfully inserted, or 1 otherwise. */
int list_insert_after(struct list *l, struct node *n, struct node *m);

/* Inserts node N before node M in list L.
 * Fails if node M is not in the list L or if node N is already in list L.
 * Returns 0 if N was successfully inserted, or 1 otherwise. */
int list_insert_before(struct list *l, struct node *n, struct node *m);

/* Returns the length of list L, or 0 if L is the NULL pointer */
size_t list_length(const struct list *l);

/* Returns a pointer to the i^th node of list L or NULL if there is no i^th
 * element in list L. */
struct node *list_get_ith(const struct list *l, size_t i);

/* Cuts list L into 2 lists, with node N being the last node in the first half
 * and all nodes after nodes N are part to the second half, in the same
 * order they were in in the original list.  Modifies list L to only contain
 * the first half and creates a new list for the second half. Returns a
 * pointer to the second half if successfully cut and NULL otherwise. */
struct list *list_cut_after(struct list *l, struct node *n);
